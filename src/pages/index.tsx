import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import {
  Box,
  Button,
  Flex,
  Link,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
  Text,
  useDisclosure,
} from "@chakra-ui/react";
import {
  Address,
  useAccount,
  useConnect,
  useContractRead,
  useDisconnect,
} from "wagmi";
import ABI from "../config/abi";
import { useEffect } from "react";
import React from "react";
import { useRouter } from "next/router";
import { on } from "events";

const inter = Inter({ subsets: ["latin"] });
const url =
  process.env.NEXT_PUBLIC_PHASE === "local"
    ? "http%3A%2F%2Flocalhost%3A3000%2F"
    : "https%3A%2F%2Fdiscord-role-test.vercel.app%2F";

export default function Home() {
  const [isDisplaying, setIsDisplaying] = React.useState(false);
  const { isOpen, onOpen, onClose } = useDisclosure();
  const router = useRouter();

  const { connect, connectors, isLoading, pendingConnector } = useConnect();
  const { address } = useAccount();
  const { disconnect } = useDisconnect();
  const {
    data,
    isError,
    isLoading: isContractReadLoading,
  } = useContractRead({
    address: "0xF16a5B64F5a774C24218a83f6FB2C7700FB6469a",
    abi: ABI,
    functionName: "balanceOf",
    args: [address ?? ("" as Address)],
  });

  useEffect(() => {
    if (address) {
      setIsDisplaying(true);
    }
  }, [address]);

  useEffect(() => {
    if (router.query.status === "unknown-member") {
      onOpen();
    }
    if (router.query.status === "hadRole") {
      alert("すでにロールをお持ちのようです！やった！");
    }
    if (router.query.status === "success") {
      alert("ロールが付与されました！やった！");
    }
  }, [router.query]);

  console.log("data:", data);

  return (
    <>
      <Head>
        <title>Discord Role Test</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <Box>
          <Text
            as="h1"
            textAlign={"center"}
            fontWeight={700}
            fontSize={"24px"}
            mb="16px"
          >
            Discord Role Test
          </Text>
          {!isDisplaying ||
            (!address && (
              <Flex
                justifyContent={"center"}
                alignItems={"center"}
                gap={"16px"}
              >
                {connectors.map((connector) => (
                  <Button
                    disabled={!connector.ready}
                    key={connector.id}
                    onClick={() => connect({ connector })}
                    isLoading={
                      isLoading && connector.id === pendingConnector?.id
                    }
                  >
                    {connector.name}
                    {isLoading &&
                      connector.id === pendingConnector?.id &&
                      " (connecting)"}
                  </Button>
                ))}
              </Flex>
            ))}
          {isDisplaying && address && (
            <Box>
              <Box>
                <Text as="span" pr="8px">
                  Connected Address:
                </Text>
                <Text as="span" fontWeight={700}>
                  {address}
                </Text>
              </Box>
              <Box>
                <Text as="span" pr="8px">
                  Balance:
                </Text>
                <Text as="span" fontWeight={700}>
                  {Number(data)}
                </Text>
              </Box>
              <Flex justifyContent={"center"} alignItems={"center"} gap="16px">
                <Button onClick={() => disconnect()}>Disconnect</Button>
                {isDisplaying && address && Number(data) > 0 && (
                  <Button
                    onClick={() =>
                      (window.location.href = `https://discord.com/api/oauth2/authorize?client_id=1161178241353142272&redirect_uri=${url}api%2Fauth%2Fcallback&response_type=code&scope=identify`)
                    }
                    colorScheme="blue"
                  >
                    Connect Discord
                  </Button>
                )}
              </Flex>
            </Box>
          )}
        </Box>
        {isOpen && (
          <Modal isOpen={isOpen} onClose={onClose}>
            <ModalOverlay />
            <ModalContent>
              <ModalHeader>Oops!</ModalHeader>
              <ModalCloseButton />
              <ModalBody>
                まだサーバーに参加していません！
                サーバーに参加してから、接続を試してみてください。
              </ModalBody>
              <ModalFooter>
                <Button variant="ghost" mr={3} onClick={onClose}>
                  閉じる
                </Button>
                <Button
                  colorScheme="blue"
                  mr={3}
                  onClick={() => {
                    window.open(
                      "https://discord.gg/VyBfeXHVu",
                      "_blank",
                      "noopener"
                    );
                    onClose();
                  }}
                >
                  サーバーに参加する
                </Button>
              </ModalFooter>
            </ModalContent>
          </Modal>
        )}
      </main>
    </>
  );
}
