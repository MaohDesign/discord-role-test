import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { Box, Button, Flex, Text } from "@chakra-ui/react";
import {
  Address,
  useAccount,
  useConnect,
  useContractRead,
  useDisconnect,
} from "wagmi";
import ABI from "../config/abi";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const { connect, connectors, isLoading, pendingConnector } = useConnect();
  const { address } = useAccount();
  const { disconnect } = useDisconnect();
  const {
    data,
    isError,
    isLoading: isContractReadLoading,
  } = useContractRead({
    address: "0xF16a5B64F5a774C24218a83f6FB2C7700FB6469a",
    abi: ABI,
    functionName: "balanceOf",
    args: [address ?? ("" as Address)],
  });

  console.log("data:", data);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div>
          <Text
            as="h1"
            textAlign={"center"}
            fontWeight={700}
            fontSize={"24px"}
            mb="16px"
          >
            Discord Role Test
          </Text>
          {!address && (
            <Flex justifyContent={"center"} alignItems={"center"} gap={"16px"}>
              {connectors.map((connector) => (
                <Button
                  disabled={!connector.ready}
                  key={connector.id}
                  onClick={() => connect({ connector })}
                  isLoading={isLoading && connector.id === pendingConnector?.id}
                >
                  {connector.name}
                  {isLoading &&
                    connector.id === pendingConnector?.id &&
                    " (connecting)"}
                </Button>
              ))}
            </Flex>
          )}
          {address && (
            <Box>
              <Box>
                <Text as="span" pr="8px">
                  Connected Address:
                </Text>
                <Text as="span" fontWeight={700}>
                  {address}
                </Text>
              </Box>
              <Box>
                <Text as="span" pr="8px">
                  Balance:
                </Text>
                <Text as="span" fontWeight={700}>
                  {Number(data)}
                </Text>
              </Box>
              <Flex justifyContent={"center"} alignItems={"center"}>
                <Button onClick={() => disconnect()}>Disconnect</Button>
              </Flex>
            </Box>
          )}
        </div>
      </main>
    </>
  );
}
